{
    "contents" : "#' Officer/Enlisted Air Force Specialty Codes (AFSCs)\n#'\n#' Determine which AFSCs are officer and which are enlisted.\n#'\n#' @param x A character vector containing AFSCs.\n#' @param allow_X Logical indicating wether or not the \\code{\"X\"} placeholder is\n#'   allowed. Default is \\code{FALSE}.\n#' @return \\code{afsc_type} returns the AFSC type (i.e., either \\code{\"officer\"}\n#'   or \\code{\"enlisted\"}). The functions \\code{is_enlisted} and\n#'   \\code{is_officer} are logical tests.\n#' @rdname afsc_type\n#' @export\n#' @examples\n#' afscs <- c(enlisted = \"9T000\", officer = \"92T0\", bad = \"A9T0X0K\")\n#' afsc_type(afscs)\n#' is_enlisted(afscs, allow_X = TRUE)\n#' is_officer(afscs)\nafsc_type <- function(x, allow_X = FALSE) {\n  ifelse(is_enlisted(x, allow_X = allow_X), \"enlisted\", \n         ifelse(is_officer(x, allow_X = allow_X), \"officer\", NA))\n}\n\n#' @rdname afsc_type\n#' @export\nis_enlisted <- function(x, allow_X = FALSE) {\n  if (allow_X) {\n    grepl(\"^[A-Z]?[1-9][A-Z][0-9][013579?X][0-9][A-Z]?$\", x)\n  } else {\n    grepl(\"^[A-Z]?[1-9][A-Z][0-9][013579][0-9][A-Z]?$\", x)\n  }\n}\n\n\n#' @rdname afsc_type\n#' @export\nis_officer <- function(x, allow_X = FALSE) {\n  if (allow_X) {\n    grepl(\"^[A-Z]?[1-9][0-9][A-Z][0-9?X][A-Z]?$\", x)\n  } else {\n    grepl(\"^[A-Z]?[1-9][0-9][A-Z][0-9][A-Z]?$\", x)\n  }\n}\n\n",
    "created" : 1449164195689.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "153854950",
    "id" : "C6906B78",
    "lastKnownWriteTime" : 1449164123,
    "path" : "~/Desktop/Dropbox/devel/afsc/R/afsc_type.R",
    "project_path" : "R/afsc_type.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}